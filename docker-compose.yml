services:
  postgres:
    image: postgres:15-alpine
    container_name: cecor-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: educational_management
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/postgres-init:/docker-entrypoint-initdb.d
    networks:
      app-network:
        ipv4_address: 172.18.0.3
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cecor-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      app-network:
        ipv4_address: 172.18.0.4

  mongodb:
    image: mongo:6-jammy
    container_name: cecor-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      app-network:
        ipv4_address: 172.18.0.5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: cecor-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      app-network:
        ipv4_address: 172.18.0.6

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      # dockerfile: Dockerfile.debug  # Use o Dockerfile específico para debug
    container_name: cecor-backend
    volumes:
      - ./backend:/app  # Monte apenas o diretório backend
    ports:
      - "8080:8080"
      - "2345:2345"  # Porta do debugger
    env_file:
      - ./backend/.env.docker
    security_opt:
      - "seccomp:unconfined"  # Necessário para debugging
    cap_add:
      - SYS_PTRACE  # Necessário para debugging  
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_started
    networks:
      app-network:
        ipv4_address: 172.18.0.2

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cecor-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    extra_hosts:
      - "backend:172.18.0.2"
    networks:
      app-network:
        ipv4_address: 172.18.0.7

volumes:
  postgres-data:
  mongodb-data:
  redis-data:
  rabbitmq-data:

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.0/16
          gateway: 172.18.0.1